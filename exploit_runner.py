#!/usr/bin/env python3
from flags import flag_parser
from flags import flag_submission
import subprocess
import ipaddress
import logging
import time
from pathlib import Path
from concurrent.futures import ThreadPoolExecutor

logger = logging.getLogger(__name__)

EXPLOIT_DIR = 'exploits'
START_IP = '10.10.40.20' #inclusive
END_IP = '10.10.40.125' #inclusive
EXPLOIT_TIMEOUT = 2 # Max timeout for exploit to finish

def run_exploit(path: Path):
    print(f'Executing {path}...')
    output_list = []
    for ip_num in range(int(ipaddress.IPv4Address(START_IP)), int(ipaddress.IPv4Address(END_IP)) + 1):
        ip = ipaddress.IPv4Address(ip_num)
        try:
            process = subprocess.run([path, str(ip)], timeout=EXPLOIT_TIMEOUT, stdout=subprocess.PIPE)
        except subprocess.TimeoutExpired:
            logger.warn(f'Timeout when exploiting file {path} for IP {ip}')
            continue
        output_list.append(process.stdout.decode('UTF-8'))
    concatinated_output = "\n".join(output_list)
    flags = flag_parser.parse_string(concatinated_output)
    flag_submission.submit_flags(flags)

def run_exploits_in_folder():
    exploit_folder = Path(EXPLOIT_DIR)
    start = time.perf_counter()
    with ThreadPoolExecutor(max_workers=2) as thread_pool:
        for exploit in exploit_folder.iterdir():
            thread_pool.submit(run_exploit, exploit)
    duration = time.perf_counter() - start
    print(f'Threadpool finished in {duration:.1f}s!')

if __name__ == '__main__':
    logging.basicConfig(
        format='%(asctime)s.%(msecs)03d <%(threadName)s> %(levelname)-8s %(message)s',
        level=logging.DEBUG,
        datefmt='%Y-%m-%d %H:%M:%S')
    run_exploits_in_folder()